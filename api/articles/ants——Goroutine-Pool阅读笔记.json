{"title":"ants——Goroutine Pool阅读笔记","uid":"0f8b0ef7f344c55a62ab260849823535","slug":"ants——Goroutine-Pool阅读笔记","date":"2022-11-30T12:12:40.000Z","updated":"2022-12-01T07:21:34.182Z","comments":true,"path":"api/articles/ants——Goroutine-Pool阅读笔记.json","keywords":null,"cover":null,"content":"<p>虽然Go语言的Scheduler十分厉害，Goroutine也很轻量级，但是如果是某些极高并发请求的情况，比如百万级请求，调度和GC就会出现问题</p>\n<p>如果实现一个类似线程池的协程池来实现资源复用，也许就能更高效地执行任务。</p>\n<h1 id=\"同步锁\"><a href=\"#同步锁\" class=\"headerlink\" title=\"同步锁\"></a>同步锁</h1><p>ants中使用的锁，是基于CAS机制和指数回避算法实现的一种锁。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> spinLock <span class=\"token builtin\">uint32</span>\n<span class=\"token keyword\">const</span> maxBackoff <span class=\"token operator\">=</span> <span class=\"token number\">16</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sl <span class=\"token operator\">*</span>spinLock<span class=\"token punctuation\">)</span> <span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tbackoff <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n\t<span class=\"token comment\">//尝试抢锁，如果本次没有抢到锁，使用指数回避算法来让自己在之后的某个时间段再随机抢锁，一直自旋直到抢到锁</span>\n    <span class=\"token comment\">//拿锁，CAS将标志位设为1</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token operator\">!</span>atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapUint32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>sl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> backoff<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//runtime.Gosched() 会让当前goroutine让出CPU，好让其他的goroutine获得执行的机会。</span>\n            <span class=\"token comment\">//当一个goroutine发生阻塞，Go会自动地把与该goroutine处于同一系统线程的其他goroutines转移到另一个系统线程上去，以使这些goroutines不阻塞</span>\n\t\t\truntime<span class=\"token punctuation\">.</span><span class=\"token function\">Gosched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//指数退避算法以指数方式重试请求（不断增加各次重试之间的等待时间，直到达到最大退避时间）</span>\n\t\t<span class=\"token keyword\">if</span> backoff <span class=\"token operator\">&lt;</span> maxBackoff <span class=\"token punctuation\">&#123;</span>\n\t\t\tbackoff <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//解锁，原子操作将标志位设为0</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sl <span class=\"token operator\">*</span>spinLock<span class=\"token punctuation\">)</span> <span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">StoreUint32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>sl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// NewSpinLock instantiates a spin-lock.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> sync<span class=\"token punctuation\">.</span>Locker <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>spinLock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Pool核心代码\"><a href=\"#Pool核心代码\" class=\"headerlink\" title=\"Pool核心代码\"></a>Pool核心代码</h1><h2 id=\"Pool的结构和配置声明\"><a href=\"#Pool的结构和配置声明\" class=\"headerlink\" title=\"Pool的结构和配置声明\"></a>Pool的结构和配置声明</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Pool <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//池容量，表示ants最多能创建的 goroutine数量。如果为负数，表示容量无限制；</span>\n\tcapacity <span class=\"token builtin\">int32</span>\n\t<span class=\"token comment\">//已经在运行的worker goroutine数量；</span>\n\trunning <span class=\"token builtin\">int32</span>\n\t<span class=\"token comment\">//记录池子当前的状态，是否已关闭（CLOSED）</span>\n\tstate <span class=\"token builtin\">int32</span>\n\t<span class=\"token comment\">//阻塞等待的任务数量</span>\n\twaiting <span class=\"token builtin\">int32</span>\n\t<span class=\"token comment\">//spinlock锁，用于并发安全的从worker队列中获取空闲worker</span>\n\tlock sync<span class=\"token punctuation\">.</span>Locker\n\t<span class=\"token comment\">//存放池中所有的worker,workerArray包含可用workers队列和过期workers队列，只会从可用workers队列中取可用worker</span>\n\tworkers workerArray\n    <span class=\"token comment\">//条件原语，pool为阻塞模式时，如果retrieveWorker函数获取不到可用worker并且没有达到池的最大阻塞数量，会一直阻塞直到被唤醒</span>\n\tcond <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>Cond\n    <span class=\"token comment\">//临时对象池 用于在retrieveWorker函数中 加速获取一个可用的worker</span>\n\tworkerCache   sync<span class=\"token punctuation\">.</span>Pool\n    <span class=\"token comment\">//为1表示已经停止清理过期worker,结束运行purgePeriodically</span>\n\theartbeatDone <span class=\"token builtin\">int32</span>\n    <span class=\"token comment\">//用于通知purgePeriodically结束运行</span>\n\tstopHeartbeat context<span class=\"token punctuation\">.</span>CancelFunc\n    <span class=\"token comment\">//用于配置pool的相关参数</span>\n\toptions       <span class=\"token operator\">*</span>Options\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> Options <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//pool的配置, 源码使用了Option写法对配置进行可选初始化</span>\n   ExpiryDuration time<span class=\"token punctuation\">.</span>Duration <span class=\"token comment\">//pool清理过期的worker的时间间隔</span>\n \n   PreAlloc <span class=\"token builtin\">bool</span> <span class=\"token comment\">//初始化时是否内存预分配</span>\n \n   MaxBlockingTasks <span class=\"token builtin\">int</span> <span class=\"token comment\">//pool.Submit被阻塞的最大goroutine数量，0表示没限制</span>\n \n   Nonblocking <span class=\"token builtin\">bool</span> <span class=\"token comment\">//Pool.Submit是否阻塞，为false时MaxBlockingTasks参数无效</span>\n \n   PanicHandler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//worker发生panic时 调用此函数，如果为nil panic会继续向外层抛出</span>\n \n   Logger Logger <span class=\"token comment\">//日志记录器 可自定义，默认官方logger</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"初始化pool\"><a href=\"#初始化pool\" class=\"headerlink\" title=\"初始化pool\"></a>初始化pool</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//创建pool的核心代码</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewPool</span><span class=\"token punctuation\">(</span>size <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span>Option<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   opts <span class=\"token operator\">:=</span> <span class=\"token function\">loadOptions</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//加载配置</span>\n \n   <span class=\"token keyword\">if</span> size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//如果容量为负数，置为-1，表示为无限池</span>\n      size <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n   <span class=\"token punctuation\">&#125;</span>\n \t<span class=\"token comment\">//检查清理时间设置是否合法</span>\n   <span class=\"token keyword\">if</span> expiry <span class=\"token operator\">:=</span> opts<span class=\"token punctuation\">.</span>ExpiryDuration<span class=\"token punctuation\">;</span> expiry <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> ErrInvalidPoolExpiry\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> expiry <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      opts<span class=\"token punctuation\">.</span>ExpiryDuration <span class=\"token operator\">=</span> DefaultCleanIntervalTime <span class=\"token comment\">//如果没设置 默认1s清理一次过期worker</span>\n   <span class=\"token punctuation\">&#125;</span>\n \n   <span class=\"token keyword\">if</span> opts<span class=\"token punctuation\">.</span>Logger <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      opts<span class=\"token punctuation\">.</span>Logger <span class=\"token operator\">=</span> defaultLogger<span class=\"token comment\">//没有设置，就用go官方的日志器</span>\n   <span class=\"token punctuation\">&#125;</span>\n \n   p <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Pool<span class=\"token punctuation\">&#123;</span>\n      capacity<span class=\"token punctuation\">:</span> <span class=\"token function\">int32</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      lock<span class=\"token punctuation\">:</span>     internal<span class=\"token punctuation\">.</span><span class=\"token function\">NewSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span>  opts<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">&#125;</span>\n   p<span class=\"token punctuation\">.</span>workerCache<span class=\"token punctuation\">.</span>New <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//临时对象池，retrieveWorker函数会在一些情况下通过其获取可用的worker</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>goWorker<span class=\"token punctuation\">&#123;</span>\n         pool<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">,</span>\n         task<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> workerChanCap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//workerChanCap是一个函数，根据GOMAXPROCS数来决定task是无缓冲还是有缓冲</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>PreAlloc <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//如果要内存预分配,就使用队列的方式实现WorkerArray接口，此情况下的workers队列容量最大为size</span>\n      <span class=\"token keyword\">if</span> size <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> ErrInvalidPreAllocSize\n          <span class=\"token comment\">//设置为无限大就无序预分配了</span>\n      <span class=\"token punctuation\">&#125;</span>\n      p<span class=\"token punctuation\">.</span>workers <span class=\"token operator\">=</span> <span class=\"token function\">newWorkerArray</span><span class=\"token punctuation\">(</span>loopQueueType<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token comment\">//用预分配内存方式创建的pool不能通过Tune函数动态改变池的容量</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//否则用栈的实现方式(默认,workers队列容量无限制)</span>\n      p<span class=\"token punctuation\">.</span>workers <span class=\"token operator\">=</span> <span class=\"token function\">newWorkerArray</span><span class=\"token punctuation\">(</span>stackType<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n \n   p<span class=\"token punctuation\">.</span>cond <span class=\"token operator\">=</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">NewCond</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token comment\">//初始化条件原语</span>\n \n   <span class=\"token keyword\">var</span> ctx context<span class=\"token punctuation\">.</span>Context\n   ctx<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>stopHeartbeat <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">go</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">purgePeriodically</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//用额外的协程去启动p.purgePeriodically(ctx)，即清道夫函数，用于定期检查释放池中过期的workers，ctx用于pool控制该goroutine什么时候结束</span>\n   <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>初始化pool之前会对参数做一些校验，比如定期清理时间的设定是否合法，是否启用官方的日志。</p>\n<p>初始化pool后，随即创建临时池</p>\n<p>创建后判断是否需要内存预分配，若不需要就使用栈的方式来实现WorkerArray</p>\n<p>最后创建一个额外的goroutine分配给清道夫函数</p>\n<h2 id=\"清道夫函数\"><a href=\"#清道夫函数\" class=\"headerlink\" title=\"清道夫函数\"></a>清道夫函数</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">purgePeriodically</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   heartbeat <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>ExpiryDuration<span class=\"token punctuation\">)</span> <span class=\"token comment\">//定义一个断续器，根据配置的时间定期向通道发送清除信号</span>\n   <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      heartbeat<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      atomic<span class=\"token punctuation\">.</span><span class=\"token function\">StoreInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">.</span>heartbeatDone<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span> \n      <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>heartbeat<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>接收到清除信号后去执行清理任务\n      <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>又或者ReleaseTimeout函数向该管道发送了信号，停止执行清理任务\n         <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">//执行清理任务前 先检查池是否关闭</span>\n      <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">IsClosed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">break</span>\n      <span class=\"token punctuation\">&#125;</span>\n \n      p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      expiredWorkers <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>workers<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveExpiry</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>ExpiryDuration<span class=\"token punctuation\">)</span> <span class=\"token comment\">//获取池中过期的workers，回收时间在time.now()-p.options.ExpiryDuration之前的worker就是过期worker，后面会讲worker的这个函数</span>\n      p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n      <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> expiredWorkers <span class=\"token punctuation\">&#123;</span>\n         expiredWorkers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>task <span class=\"token operator\">&lt;-</span> <span class=\"token boolean\">nil</span> <span class=\"token comment\">//通知还在运行的过期worker 停止手上的工作</span>\n         expiredWorkers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>       <span class=\"token comment\">//释放过期worker</span>\n      <span class=\"token punctuation\">&#125;</span>\n \n      <span class=\"token comment\">// 因为有可能所有的worker都被清理了 或者 开发者调用了Tune函数扩大了pool的容量，但仍然有goroutine被p.cond.Wait()阻塞，此时就可唤醒全部goroutine去抢夺worker</span>\n      <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">Waiting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         p<span class=\"token punctuation\">.</span>cond<span class=\"token punctuation\">.</span><span class=\"token function\">Broadcast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"获取一个可用的worker\"><a href=\"#获取一个可用的worker\" class=\"headerlink\" title=\"获取一个可用的worker\"></a>获取一个可用的worker</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Pool<span class=\"token punctuation\">)</span> <span class=\"token function\">retrieveWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">*</span>goWorker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//获取一个可用的worker</span>\n<span class=\"token comment\">//从临时对象池中获取一个新生成的worker</span>\nspawnWorker <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   w <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>workerCache<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>goWorker<span class=\"token punctuation\">)</span>\n   w<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\np<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \nw <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>workers<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> w <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//尝试从队列中获取worker</span>\n   p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> capacity <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Cap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> capacity <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> capacity <span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token comment\">//如果工作队列为空并且池未满，就从临时对象池中获取</span>\n   p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token function\">spawnWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> \n    <span class=\"token punctuation\">&#123;</span> \n   <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>Nonblocking <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//如果池是非阻塞模式，则直接返回nil切片</span>\n      p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n   <span class=\"token punctuation\">&#125;</span>\nretry<span class=\"token punctuation\">:</span> <span class=\"token comment\">//如果池是阻塞模式，这种情况只能阻塞直到获取一个可用的worker</span>\n   <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>MaxBlockingTasks <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Waiting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> p<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>MaxBlockingTasks <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//如果当前阻塞goroutine数量 >= 设置的最大阻塞数，直接返回</span>\n      p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">//否则阻塞直到收到通知有可用的worker</span>\n   p<span class=\"token punctuation\">.</span><span class=\"token function\">addWaiting</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   p<span class=\"token punctuation\">.</span>cond<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n   p<span class=\"token punctuation\">.</span><span class=\"token function\">addWaiting</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n   <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">IsClosed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//被唤醒后如果池已经关闭则直接结束</span>\n      p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n   <span class=\"token punctuation\">&#125;</span>\n \n   <span class=\"token keyword\">var</span> nw <span class=\"token builtin\">int</span>\n   <span class=\"token keyword\">if</span> nw <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> nw <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span> \n      p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">spawnWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//如果是被清道夫唤醒则从临时对象池中获取worker</span>\n      <span class=\"token keyword\">return</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> w <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>workers<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//如果正常从worker队列中没获取到</span>\n      <span class=\"token keyword\">if</span> nw <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Cap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//如果当前运行数量小于容量就从临时对象池获取</span>\n         p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token function\">spawnWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">goto</span> retry <span class=\"token comment\">//否则重试之前操作</span>\n   <span class=\"token punctuation\">&#125;</span>\n   p<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//正常从worker队列中获取到了则返回</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个方法里有很多条件语句的嵌套，读起来甚是费力，也许是go语言没有括号的原因，java看多了就有点不习惯</p>\n<p>接下来我们可以捋顺逻辑了：</p>\n<p>尝试获取worker：正常获取到则返回，若无空闲worker就从临时池里获取并返回。</p>\n<p>未获取到worker：此时已经无空闲goroutine</p>\n<p>若为非阻塞模式，直接退出。</p>\n<p>若为阻塞模式，使用死循环等待获取goroutine。这里使用了goto来实现，若当前阻塞协程数量超过阈值，直接退出。获取不到或者无已经启用的goroutine就从临时池里获取</p>\n","feature":true,"text":"虽然Go语言的Scheduler十分厉害，Goroutine也很轻量级，但是如果是某些极高并发请求的情况，比如百万级请求，调度和GC就会出现问题 如果实现一个类似线程池的协程池来实现资源复用，也许就能更高效地执行任务。 同步锁ants中使用的锁，是基于CAS机制和指数回避算法实现...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"源码学习笔记","slug":"源码学习笔记","count":1,"path":"api/tags/源码学习笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E9%94%81\"><span class=\"toc-text\">同步锁</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Pool%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">Pool核心代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Pool%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E9%85%8D%E7%BD%AE%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">Pool的结构和配置声明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96pool\"><span class=\"toc-text\">初始化pool</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B8%85%E9%81%93%E5%A4%AB%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">清道夫函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E5%8F%AF%E7%94%A8%E7%9A%84worker\"><span class=\"toc-text\">获取一个可用的worker</span></a></li></ol></li></ol>","author":{"name":"Samuel","slug":"blog-author","avatar":"/img/avatar.PNG","link":"/","description":"<b>燃烧烈爱,静默如谜</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"netty进阶","uid":"c4bbab825e6b5f8c309a31fde6de63ea","slug":"netty进阶","date":"2022-11-24T08:04:09.000Z","updated":"2022-11-24T08:04:45.671Z","comments":true,"path":"api/articles/netty进阶.json","keywords":null,"cover":[],"text":"MpscQueueMpsc来自JCTools，即JAVA的高并发增强包，主要提供了一些 JDK 缺失的并发数据结构 Spsc 单生产者单消费者 Mpsc 多生产者单消费者 Spmc 单生产者多消费者 Mpmc 多生产者多消费者 Mpsc 的全称是 Multi Producer S...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"netty","slug":"netty","count":3,"path":"api/tags/netty.json"}],"author":{"name":"Samuel","slug":"blog-author","avatar":"/img/avatar.PNG","link":"/","description":"<b>燃烧烈爱,静默如谜</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}