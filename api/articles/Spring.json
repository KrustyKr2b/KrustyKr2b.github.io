{"title":"Spring","uid":"946249c65165e1a3d66f50e0cb6e89e7","slug":"Spring","date":"2022-10-26T13:17:18.000Z","updated":"2022-11-08T13:01:19.564Z","comments":true,"path":"api/articles/Spring.json","keywords":null,"cover":[],"content":"<h1 id=\"bean的生命周期\"><a href=\"#bean的生命周期\" class=\"headerlink\" title=\"bean的生命周期\"></a>bean的生命周期</h1><p>Bean的创建分为三个基本步骤</p>\n<ol>\n<li>实例化：可以理解为new一个对象，<code>AbstractAutowireCapableBeanFactory</code>中的<code>createBeanInstance</code>方法</li>\n<li>属性注入：可以理解为setter方法完成属性注入，<code>AbstractAutowireCapableBeanFactory</code>的<code>populateBean</code>方法</li>\n<li>初始化：按照Spring的规则配置一些初始化的方法，例如实现AOP代理，注解。<code>AbstractAutowireCapableBeanFactory</code>的<code>initializeBean</code>方法</li>\n</ol>\n<p>而Bean的完整生命周期就是在上面三个步骤中穿插执行<code>BeanPostProcessor</code>后置处理器的过程</p>\n<p><img src=\"/../img/bean1.png\" alt=\"bean1\"></p>\n<p>普通Java对象可以理解为它是用Class对象作为「模板」进而创建出具体的实例，而Spring所管理的Bean不同的是，除了Class对象之外，还会使用<code>BeanDefinition</code>的实例来描述对象的信息，比如说，我们可以在Spring所管理的Bean有一系列的描述：@Scope、@Lazy等等。可以理解为：Class只描述了类的信息，而<code>BeanDefinition</code>描述了对象的信息。</p>\n<ol>\n<li>Spring在启动的时候需要「扫描」在<code>XML/注解/JavaConfig</code> 中需要被Spring管理的Bean信息，随后，会将这些信息封装成<code>BeanDefinition</code>，最后会把这些信息放到一个<code>beanDefinitionMap</code>中，key是<code>beanName</code>，value则是<code>BeanDefinition</code>对象，目前真实对象还没实例化，接着会遍历这个<code>beanDefinitionMap</code>，执行<code>BeanFactoryPostProcessor</code>这个Bean工厂后置处理器</li>\n<li>比如说，我们平时定义的占位符信息，就是通过<code>BeanFactoryPostProcessor</code>的子类<code>PropertyPlaceholderConfigurer</code>进行注入进去，我们也可以自定义<code>BeanFactoryPostProcessor</code>来对我们定义好的Bean元数据进行获取或者修改</li>\n<li><code>BeanFactoryPostProcessor</code>后置处理器执行完了以后，就到了实例化对象，在Spring里边是通过<strong>反射</strong>来实现的，一般情况下会通过反射选择合适的构造器来把对象实例化</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//反射创建</span>\n<span class=\"token class-name\">Constructor</span> ctor <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclareConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> ctor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>实例化只是把对象给创建出来，而对象具体的属性是还没注入的，比如我的对象是UserService，而UserService对象依赖着SendService对象，这时候的SendService还是null的，使用<code>populateBean()</code>进行属性注入，这里便会牵扯出<strong>循环依赖</strong>的问题</li>\n<li>属性注入后会判断该Bean是否实现了Aware相关的接口，如果存在则填充相关的资源，<code>invokeAwareMethod()</code>，进行<code>BeanName</code>，<code>BeanFactory</code>，<code>BeanClassLoader</code>属性设置</li>\n<li>Aware相关的接口处理完之后，就会到<code>BeanPostProcessor</code>后置处理器，<code>BeanPostProcessor</code>后置处理器有两个方法，一个是before，一个是after</li>\n<li><code>BeanPostProcessor</code>相关子类的before方法执行完，则执行init相关的方法，比如说<code>@PostConstruct</code>、实现了<code>InitializingBean</code>接口、定义的<code>init-method</code>方法</li>\n<li>init方法执行完之后，就会执行<code>BeanPostProcessor</code>的after方法，AOP就在此实现（关键子类<code>AnnotationAwareAspectJAutoProxyCreator</code>），基本重要的流程已经走完了，我们就可以获取到对象去使用了</li>\n</ol>\n<p><img src=\"/../img/bean.jpg\" alt=\"bean\"></p>\n<h1 id=\"对IOC的理解\"><a href=\"#对IOC的理解\" class=\"headerlink\" title=\"对IOC的理解\"></a>对IOC的理解</h1><p>控制反转：一种编程思想，即讲对象交给spring容器来帮我们进行管理。</p>\n<p>DI：依赖注入，把对应的值注入到具体的对象中，即@Autowired或者populateBean</p>\n<p>容器：存放对象，使用Map结构来存储，在spring中一般存在三级缓存，singletonObject存放完整的Bean对象，bean的整个生命周期，从创建到销毁都是由容器来管理。</p>\n<h1 id=\"AOP是如何实现的\"><a href=\"#AOP是如何实现的\" class=\"headerlink\" title=\"AOP是如何实现的\"></a>AOP是如何实现的</h1><p>AOP是IOC的一个扩展功能，现有IOC，再有AOP，AOP是IOC整个流程的一个扩展点</p>\n<p>在bean的创建过程中有一个步骤可以对bean进行扩展实现，beanPostProcessor后置处理，而AOP就是其中一个扩展</p>\n<ol>\n<li>代理对象的创建（advice，切面，切点）</li>\n<li>通过jdk或者cglib的方式来生成代理对象</li>\n<li>在执行方法调用的时候，会调用到生成的字节码文件中，会调用DynamicAdvisoredInterceptor类中的intercept方法，从此方法开始执行</li>\n<li>根据之前定义好的通知生成拦截器</li>\n<li>按照拦截器链中以此获取每一个通知，开始进行执行</li>\n</ol>\n<h1 id=\"循环依赖和三级缓存\"><a href=\"#循环依赖和三级缓存\" class=\"headerlink\" title=\"循环依赖和三级缓存\"></a>循环依赖和三级缓存</h1><p>所谓的<code>循环依赖</code>，就是两个或则两个以上的<code>bean</code>互相依赖对方，最终形成<code>闭环</code></p>\n<p>比如“A对象依赖B对象，而B对象也依赖A对象”，或者“A对象依赖B对象，B对象依赖C对象，C对象依赖A对象”</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">A</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在常规情况下，会出现以下情况</p>\n<ol>\n<li>通过构建函数创建A对象（A对象是<strong>半成品</strong>，还没注入属性和调用init方法）。</li>\n<li>A对象需要注入B对象，发现<strong>对象池</strong>里还没有B对象（对象在创建并且注入属性和初始化完成之后，会放入对象缓存里）。</li>\n<li>通过构建函数创建B对象（B对象是半成品，还没注入属性和调用init方法）。</li>\n<li>B对象需要注入A对象，发现对象池里还没有A对象。</li>\n<li>创建A对象，循环以上步骤。</li>\n</ol>\n<p>解决循环依赖的最核心思想：<em><strong>提前曝光</strong></em></p>\n<p>将半成品A提前放入缓存池，从而可以让B对象成功完成属性注入和初始化，成品B可以让半成品A完成初始化，从而打破了循环依赖</p>\n<ol>\n<li>通过构建函数创建A对象（A对象是半成品，还没注入属性和调用init方法）。</li>\n<li>A对象需要注入B对象，发现缓存里还没有B对象，将<code>半成品对象A</code>放入<code>半成品缓存</code>。</li>\n<li>通过构建函数创建B对象（B对象是半成品，还没注入属性和调用init方法）。</li>\n<li>B对象需要注入A对象，从<code>半成品缓存</code>里取到<code>半成品对象A</code>。</li>\n<li>B对象继续注入其他属性和初始化，之后将<code>完成品B对象</code>放入<code>完成品缓存</code>。</li>\n<li>A对象继续注入属性，从<code>完成品缓存</code>中取到<code>完成品B对象</code>并注入。</li>\n<li>A对象继续注入其他属性和初始化，之后将<code>完成品A对象</code>放入<code>完成品缓存</code>。</li>\n</ol>\n<h2 id=\"三级缓存\"><a href=\"#三级缓存\" class=\"headerlink\" title=\"三级缓存\"></a>三级缓存</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//一级缓存：存放成品bean</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> singletonObjects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//二级缓存，存放半成品bean，提前曝光的核心</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> earlySingletonObjects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//三级缓存，存放bean工厂对象，用来生成半成品bean并存入二级缓存中</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectFactory</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> singletonFactories <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>直接看流程图：</p>\n<p><img src=\"/../img/SpringCache.png\" alt=\"SpringCache\"></p>\n<p><em><strong>问：这里的第三级缓存有什么用？</strong></em></p>\n<p>如果我们不考虑AOP的情况下，第三级缓存真没什么用，它直接将实例化阶段创建的对象给返回了。</p>\n<p>如果我们考虑上了AOP，那么流程图会变成：</p>\n<p><img src=\"/../img/SpringCache1.png\" alt=\"SpringCache1\"></p>\n<p>我们对A进行了<code>AOP</code>代理的话，那么此时<code>getEarlyBeanReference</code>将返回一个代理后的对象，而不是实例化阶段创建的对象，这样就意味着B中注入的A将是一个代理对象而不是A的实例化阶段创建后的对象。</p>\n<p><em><strong>问：初始化的时候是对A对象本身进行初始化，而容器中以及注入到B中的都是代理对象，这样不会有问题吗？</strong></em></p>\n<p>不会，这是因为不管是<code>cglib</code>代理还是<code>jdk</code>动态代理生成的代理类，<strong>内部都持有一个目标类的引用</strong>，当调用代理对象的方法时，实际会去调用目标对象的方法，A完成初始化相当于代理对象自身也完成了初始化。</p>\n<p><em><strong>问：三级缓存为啥要存一个工厂，而不是直接存一个引用进去呢？</strong></em></p>\n<p>工厂的目的在于只有真正发生循环依赖的时候，才会去生成代理对象。如果未发生循环依赖，那么就只有一个工厂放那儿，<strong>但是不会去通过这个工厂去真正创建对象</strong>。</p>\n<p><em><strong>问：为什么要使用第三级缓存呢，不管有没有循环依赖，我们都提前创建好代理对象，并将代理对象放入缓存，出现循环依赖时，其他对象直接就可以取到代理对象并注入。这样就只会使用两级缓存，不是更方便嘛？</strong></em></p>\n<p>如果要使用二级缓存解决循环依赖，意味着Bean在构造完后就需要创建代理对象，这样<strong>违背了Spring设计原则</strong>！！</p>\n<p>Spring结合AOP跟Bean的生命周期，是在Bean创建完全之后通过<code>AnnotationAwareAspectJAutoProxyCreator</code>这个<strong>后置处理器</strong>来完成的，在这个后置处理的<code>postProcessAfterInitialization</code>方法中对初始化后的Bean完成AOP代理。如果出现了循环依赖，那没有办法，只有给Bean先创建代理，但是没有出现循环依赖的情况下，设计之初就是让<strong>Bean在生命周期的最后一步完成代理</strong>而不是在实例化后就立马完成代理。</p>\n<p><em><strong>使用二级缓存：</strong></em></p>\n<p><img src=\"/../img/SpringCache3.png\" alt=\"SpringCache3\"></p>\n<p><em><strong>使用三级缓存：</strong></em></p>\n<p><img src=\"D:/samuelBlog/folder/source/img/SpringCache2.png\" alt=\"SpringCache2\"></p>\n<p><em><strong>总结：Spring如何解决循环依赖？</strong></em></p>\n<p>答：Spring通过三级缓存解决了循环依赖，其中一级缓存为单例池（<code>singletonObjects</code>，一个并发HashMap）,二级缓存为早期曝光对象<code>earlySingletonObjects</code>，三级缓存为早期曝光对象工厂（<code>singletonFactories</code>），二三级缓存均为普通的HashMap。</p>\n<p>当A、B两个类发生循环引用时，在A完成实例化后，就使用实例化后的对象去创建一个对象工厂，并添加到三级缓存中，如果A被AOP代理，那么通过这个工厂获取到的就是A代理后的对象，如果A没有被AOP代理，那么这个工厂获取到的就是A实例化的对象。</p>\n<p>当A进行属性注入时，会去创建B，同时B又依赖了A，所以创建B的同时又会去调用getBean(a)来获取需要的依赖，此时的getBean(a)会从缓存中获取，第一步，先获取到三级缓存中的工厂；第二步，调用对象工工厂的getObject方法来获取到对应的对象，得到这个对象后将其注入到B中。紧接着B会走完它的生命周期流程，包括初始化、后置处理器等。</p>\n<p>当B创建完后，会将B再注入到A中，此时A再完成它的整个生命周期。至此，循环依赖结束！</p>\n","text":"bean的生命周期Bean的创建分为三个基本步骤 实例化：可以理解为new一个对象，AbstractAutowireCapableBeanFactory中的createBeanInstance方法 属性注入：可以理解为setter方法完成属性注入，AbstractAutowire...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"JAVA进阶","slug":"JAVA进阶","count":1,"path":"api/tags/JAVA进阶.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">bean的生命周期</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%B9IOC%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对IOC的理解</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#AOP%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84\"><span class=\"toc-text\">AOP是如何实现的</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%92%8C%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">循环依赖和三级缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">三级缓存</span></a></li></ol></li></ol>","author":{"name":"Samuel","slug":"blog-author","avatar":"/img/avatar.PNG","link":"/","description":"<b>燃烧烈爱,静默如谜</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"每日一问10/30/2022","uid":"e4749bfd7c607c28b7704998d562cc90","slug":"每日一问10-30-2022","date":"2022-10-30T05:35:42.000Z","updated":"2022-10-31T06:17:07.497Z","comments":true,"path":"api/articles/每日一问10-30-2022.json","keywords":null,"cover":null,"text":"Object类中有哪些方法答： equals()：未被重写前，由&#x3D;&#x3D;来实现，比较引用数据类型的引用地址是否相同 HashCode()：本地方法，未被重写前返回对象在堆上的唯一地址值，可以看作是对象的身份ID clone()：实现了cloneable接口才可以调...","link":"","photos":[],"count_time":{"symbolsCount":739,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java基础知识","slug":"Java基础知识","count":12,"path":"api/tags/Java基础知识.json"}],"author":{"name":"Samuel","slug":"blog-author","avatar":"/img/avatar.PNG","link":"/","description":"<b>燃烧烈爱,静默如谜</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"mySQL","uid":"de0127f4fce15732bd481675d6959d45","slug":"mySQL","date":"2022-10-25T14:02:31.000Z","updated":"2022-10-27T09:32:18.031Z","comments":true,"path":"api/articles/mySQL.json","keywords":null,"cover":[],"text":"MYSQL关系型数据库，插件式的存储引擎，这种架构可以根据业务的需求和实际需要选择合适的存储引擎。 客户端通过协议与服务器连接，发送查询语句，先检查缓存是否命中，若命中直接返回，否则进行语句解析 预处理，检查语句是否有语法错误，查询优化（是否会使用索引扫描），生成查询计划，启动查...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"数据库基础","slug":"数据库基础","count":2,"path":"api/tags/数据库基础.json"}],"author":{"name":"Samuel","slug":"blog-author","avatar":"/img/avatar.PNG","link":"/","description":"<b>燃烧烈爱,静默如谜</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}