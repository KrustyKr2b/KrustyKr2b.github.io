{"title":"位运算技巧","uid":"bdd0b34d75b797c3e041acb9ccf9384c","slug":"位运算技巧","date":"2022-10-13T04:59:51.000Z","updated":"2022-10-13T05:21:40.401Z","comments":true,"path":"api/articles/位运算技巧.json","keywords":null,"cover":null,"content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//位运算算法技巧</span>\n<span class=\"token comment\">//不用临时变量交换两个数</span>\na <span class=\"token operator\">^=</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">^=</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">^=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//判断是否异号（同号）</span>\n<span class=\"token keyword\">boolean</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//利用或操作 | 和空格将英文字符转换为小写</span>\n<span class=\"token punctuation\">(</span><span class=\"token char\">'A'</span> <span class=\"token operator\">|</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//利用与操作 &amp; 和下划线将英文字符转换为大写</span>\n<span class=\"token punctuation\">(</span><span class=\"token char\">'b'</span> <span class=\"token operator\">&amp;</span> <span class=\"token char\">'_'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token char\">'B'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//利用异或操作 ^ 和空格进行英文字符大小写互换</span>\n<span class=\"token punctuation\">(</span><span class=\"token char\">'D'</span> <span class=\"token operator\">^</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token char\">'d'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//去掉最后一位1</span>\nn <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//异或运算的特殊性质,异或运算满足交换律和结合律</span>\na <span class=\"token operator\">^</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">^</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//取反码+与运算</span>\nx <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token number\">0</span> <span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"//位运算算法技巧 //不用临时变量交换两个数 a ^= b; b ^= a; a ^= b; //判断是否异号（同号） boolean f = ((x ^ y) &lt; 0); //利用或操作 | 和空格将英文字符转换为小写 ('A' | ' ') = 'a'; //利用与操...","link":"","photos":[],"count_time":{"symbolsCount":346,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"算法归纳","slug":"算法归纳","count":2,"path":"api/tags/算法归纳.json"}],"toc":"","author":{"name":"Samuel","slug":"blog-author","avatar":"/img/avatar.PNG","link":"/","description":"<b>大三艰苦找实习的初阶技术人</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"子集排列问题sucks","uid":"e0c4de6a72c616ec823d805c53472b1a","slug":"子集排列问题sucks","date":"2022-10-13T05:14:49.000Z","updated":"2022-10-13T05:21:32.316Z","comments":true,"path":"api/articles/子集排列问题sucks.json","keywords":null,"cover":null,"text":"回溯算法解决所有子集排列问题形式一：元素无重复，且不可复选，即nums中所有元素均唯一，且最多使用一次 /* 组合/子集问题回溯算法框架 */ //使用start参数来避免复选 void backtrack(int[] nums, int start) &#123; // 回溯算...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"算法归纳","slug":"算法归纳","count":2,"path":"api/tags/算法归纳.json"}],"author":{"name":"Samuel","slug":"blog-author","avatar":"/img/avatar.PNG","link":"/","description":"<b>大三艰苦找实习的初阶技术人</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"JVM随笔","uid":"1a1bb15f69c32b83456560735cf8e617","slug":"Java随想","date":"2022-10-12T04:37:43.000Z","updated":"2022-10-13T05:20:52.340Z","comments":true,"path":"api/articles/Java随想.json","keywords":null,"cover":null,"text":"JAVA内存区域讲解运行时数据区域分为两部分：线程共享和线程私有 线程共享区域： 堆：是虚拟机内存的最大的一块，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存，注意是“几乎”，JDK1.7之后，当方法中的对象引用没有被返回或者未被外部使用，就会直...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java基础知识","slug":"Java基础知识","count":3,"path":"api/tags/Java基础知识.json"}],"author":{"name":"Samuel","slug":"blog-author","avatar":"/img/avatar.PNG","link":"/","description":"<b>大三艰苦找实习的初阶技术人</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}